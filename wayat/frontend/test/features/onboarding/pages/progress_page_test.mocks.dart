// Mocks generated by Mockito 5.3.0 from annotations
// in wayat/test/features/onboarding/pages/progress_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mobx/mobx.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wayat/app_state/user_session/session_state.dart' as _i6;
import 'package:wayat/domain/contact/contact.dart' as _i12;
import 'package:wayat/domain/user/my_user.dart' as _i7;
import 'package:wayat/features/onboarding/controller/onboarding_controller.dart'
    as _i9;
import 'package:wayat/features/onboarding/controller/onboarding_progress.dart'
    as _i11;
import 'package:wayat/features/onboarding/controller/onboarding_state.dart'
    as _i10;
import 'package:wayat/services/authentication/auth_service.dart' as _i2;
import 'package:wayat/services/contact/contact_service.dart' as _i5;
import 'package:wayat/services/contact/import_phones_service_impl.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthService_0 extends _i1.SmartFake implements _i2.AuthService {
  _FakeAuthService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i3.ReactiveContext {
  _FakeReactiveContext_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContactsAddressServiceImpl_2 extends _i1.SmartFake
    implements _i4.ContactsAddressServiceImpl {
  _FakeContactsAddressServiceImpl_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeContactService_3 extends _i1.SmartFake
    implements _i5.ContactService {
  _FakeContactService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableMap_4<K, V> extends _i1.SmartFake
    implements _i3.ObservableMap<K, V> {
  _FakeObservableMap_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SessionState].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionState extends _i1.Mock implements _i6.SessionState {
  MockSessionState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get finishLoggedIn => (super.noSuchMethod(
        Invocation.getter(#finishLoggedIn),
        returnValue: false,
      ) as bool);
  @override
  set finishLoggedIn(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #finishLoggedIn,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get googleSignedIn => (super.noSuchMethod(
        Invocation.getter(#googleSignedIn),
        returnValue: false,
      ) as bool);
  @override
  set googleSignedIn(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #googleSignedIn,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasDoneOnboarding => (super.noSuchMethod(
        Invocation.getter(#hasDoneOnboarding),
        returnValue: false,
      ) as bool);
  @override
  set hasDoneOnboarding(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #hasDoneOnboarding,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set currentUser(_i7.MyUser? value) => super.noSuchMethod(
        Invocation.setter(
          #currentUser,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.AuthService get authService => (super.noSuchMethod(
        Invocation.getter(#authService),
        returnValue: _FakeAuthService_0(
          this,
          Invocation.getter(#authService),
        ),
      ) as _i2.AuthService);
  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);
  @override
  _i8.Future<void> doneOnBoarding() => (super.noSuchMethod(
        Invocation.method(
          #doneOnBoarding,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> isLogged() => (super.noSuchMethod(
        Invocation.method(
          #isLogged,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  void setGoogleSignIn(bool? signedIn) => super.noSuchMethod(
        Invocation.method(
          #setGoogleSignIn,
          [signedIn],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setFinishLoggedIn(bool? finishedLoggedIn) => super.noSuchMethod(
        Invocation.method(
          #setFinishLoggedIn,
          [finishedLoggedIn],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<dynamic> initializeUser() => (super.noSuchMethod(
        Invocation.method(
          #initializeUser,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> updateCurrentUser() => (super.noSuchMethod(
        Invocation.method(
          #updateCurrentUser,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<bool> updatePhone(String? phone) => (super.noSuchMethod(
        Invocation.method(
          #updatePhone,
          [phone],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<bool> setDoneOnBoarding() => (super.noSuchMethod(
        Invocation.method(
          #setDoneOnBoarding,
          [],
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<dynamic> doLoginProcess() => (super.noSuchMethod(
        Invocation.method(
          #doLoginProcess,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<dynamic> initializeUserSession() => (super.noSuchMethod(
        Invocation.method(
          #initializeUserSession,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  _i8.Future<void> login() => (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<dynamic> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<dynamic>.value(),
      ) as _i8.Future<dynamic>);
  @override
  bool isOnboardingCompleted() => (super.noSuchMethod(
        Invocation.method(
          #isOnboardingCompleted,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  bool hasPhone() => (super.noSuchMethod(
        Invocation.method(
          #hasPhone,
          [],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [OnboardingController].
///
/// See the documentation for Mockito's code generation for more information.
class MockOnboardingController extends _i1.Mock
    implements _i9.OnboardingController {
  MockOnboardingController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ContactsAddressServiceImpl get importContactService =>
      (super.noSuchMethod(
        Invocation.getter(#importContactService),
        returnValue: _FakeContactsAddressServiceImpl_2(
          this,
          Invocation.getter(#importContactService),
        ),
      ) as _i4.ContactsAddressServiceImpl);
  @override
  _i5.ContactService get contactService => (super.noSuchMethod(
        Invocation.getter(#contactService),
        returnValue: _FakeContactService_3(
          this,
          Invocation.getter(#contactService),
        ),
      ) as _i5.ContactService);
  @override
  _i10.OnBoardingState get onBoardingState => (super.noSuchMethod(
        Invocation.getter(#onBoardingState),
        returnValue: _i10.OnBoardingState.notStarted,
      ) as _i10.OnBoardingState);
  @override
  set onBoardingState(_i10.OnBoardingState? value) => super.noSuchMethod(
        Invocation.setter(
          #onBoardingState,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.OnBoardingProgress get currentPage => (super.noSuchMethod(
        Invocation.getter(#currentPage),
        returnValue: _i11.OnBoardingProgress.initialManageContactsTip,
      ) as _i11.OnBoardingProgress);
  @override
  set currentPage(_i11.OnBoardingProgress? value) => super.noSuchMethod(
        Invocation.setter(
          #currentPage,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ObservableMap<_i12.Contact, bool> get contacts => (super.noSuchMethod(
        Invocation.getter(#contacts),
        returnValue: _FakeObservableMap_4<_i12.Contact, bool>(
          this,
          Invocation.getter(#contacts),
        ),
      ) as _i3.ObservableMap<_i12.Contact, bool>);
  @override
  set contacts(_i3.ObservableMap<_i12.Contact, bool>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #contacts,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i12.Contact> get contactList => (super.noSuchMethod(
        Invocation.getter(#contactList),
        returnValue: <_i12.Contact>[],
      ) as List<_i12.Contact>);
  @override
  List<_i12.Contact> get selectedContacts => (super.noSuchMethod(
        Invocation.getter(#selectedContacts),
        returnValue: <_i12.Contact>[],
      ) as List<_i12.Contact>);
  @override
  List<_i12.Contact> get unselectedContacts => (super.noSuchMethod(
        Invocation.getter(#unselectedContacts),
        returnValue: <_i12.Contact>[],
      ) as List<_i12.Contact>);
  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_1(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);
  @override
  void importContacts() => super.noSuchMethod(
        Invocation.method(
          #importContacts,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool isSelected(_i12.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #isSelected,
          [contact],
        ),
        returnValue: false,
      ) as bool);
  @override
  void finishOnBoarding() => super.noSuchMethod(
        Invocation.method(
          #finishOnBoarding,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void progressTo(_i11.OnBoardingProgress? newPage) => super.noSuchMethod(
        Invocation.method(
          #progressTo,
          [newPage],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool moveBack() => (super.noSuchMethod(
        Invocation.method(
          #moveBack,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void updateSelected(_i12.Contact? contact) => super.noSuchMethod(
        Invocation.method(
          #updateSelected,
          [contact],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addAll(List<_i12.Contact>? contactList) => super.noSuchMethod(
        Invocation.method(
          #addAll,
          [contactList],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setOnBoardingState(_i10.OnBoardingState? state) => super.noSuchMethod(
        Invocation.method(
          #setOnBoardingState,
          [state],
        ),
        returnValueForMissingStub: null,
      );
}
