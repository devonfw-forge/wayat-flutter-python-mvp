// Mocks generated by Mockito 5.3.0 from annotations
// in wayat/test/features/contacts/controller/suggestions_controller/suggestions_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wayat/app_state/user_session/session_state.dart' as _i11;
import 'package:wayat/domain/contact/contact.dart' as _i7;
import 'package:wayat/domain/user/my_user.dart' as _i12;
import 'package:wayat/features/contacts/controller/friends_controller/friends_controller.dart'
    as _i3;
import 'package:wayat/features/contacts/controller/requests_controller/requests_controller.dart'
    as _i8;
import 'package:wayat/services/authentication/auth_service.dart' as _i4;
import 'package:wayat/services/contact/contact_service.dart' as _i5;
import 'package:wayat/services/contact/flutter_contacts_handler_libw.dart'
    as _i10;
import 'package:wayat/services/contact/import_phones_service_impl.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeObservableList_0<T> extends _i1.SmartFake
    implements _i2.ObservableList<T> {
  _FakeObservableList_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFriendsController_2 extends _i1.SmartFake
    implements _i3.FriendsController {
  _FakeFriendsController_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAuthService_3 extends _i1.SmartFake implements _i4.AuthService {
  _FakeAuthService_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [ContactService].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactService extends _i1.Mock implements _i5.ContactService {
  MockContactService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i7.Contact>> getAll() =>
      (super.noSuchMethod(Invocation.method(#getAll, []),
              returnValue: _i6.Future<List<_i7.Contact>>.value(<_i7.Contact>[]))
          as _i6.Future<List<_i7.Contact>>);
  @override
  _i6.Future<void> sendRequests(List<_i7.Contact>? contacts) =>
      (super.noSuchMethod(Invocation.method(#sendRequests, [contacts]),
              returnValue: _i6.Future<void>.value(),
              returnValueForMissingStub: _i6.Future<void>.value())
          as _i6.Future<void>);
  @override
  _i6.Future<List<_i7.Contact>> getFilteredContacts(
          List<String>? importedContacts) =>
      (super.noSuchMethod(
              Invocation.method(#getFilteredContacts, [importedContacts]),
              returnValue: _i6.Future<List<_i7.Contact>>.value(<_i7.Contact>[]))
          as _i6.Future<List<_i7.Contact>>);
  @override
  _i6.Future<bool> removeContact(_i7.Contact? contact) =>
      (super.noSuchMethod(Invocation.method(#removeContact, [contact]),
          returnValue: _i6.Future<bool>.value(false)) as _i6.Future<bool>);
}

/// A class which mocks [FriendsController].
///
/// See the documentation for Mockito's code generation for more information.
class MockFriendsController extends _i1.Mock implements _i3.FriendsController {
  MockFriendsController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get textFilter =>
      (super.noSuchMethod(Invocation.getter(#textFilter), returnValue: '')
          as String);
  @override
  set textFilter(String? _textFilter) =>
      super.noSuchMethod(Invocation.setter(#textFilter, _textFilter),
          returnValueForMissingStub: null);
  @override
  List<_i7.Contact> get allContacts =>
      (super.noSuchMethod(Invocation.getter(#allContacts),
          returnValue: <_i7.Contact>[]) as List<_i7.Contact>);
  @override
  set allContacts(List<_i7.Contact>? _allContacts) =>
      super.noSuchMethod(Invocation.setter(#allContacts, _allContacts),
          returnValueForMissingStub: null);
  @override
  _i2.ObservableList<_i7.Contact> get filteredContacts =>
      (super.noSuchMethod(Invocation.getter(#filteredContacts),
              returnValue: _FakeObservableList_0<_i7.Contact>(
                  this, Invocation.getter(#filteredContacts)))
          as _i2.ObservableList<_i7.Contact>);
  @override
  set filteredContacts(_i2.ObservableList<_i7.Contact>? value) =>
      super.noSuchMethod(Invocation.setter(#filteredContacts, value),
          returnValueForMissingStub: null);
  @override
  List<_i7.Contact> get availableContacts =>
      (super.noSuchMethod(Invocation.getter(#availableContacts),
          returnValue: <_i7.Contact>[]) as List<_i7.Contact>);
  @override
  List<_i7.Contact> get unavailableContacts =>
      (super.noSuchMethod(Invocation.getter(#unavailableContacts),
          returnValue: <_i7.Contact>[]) as List<_i7.Contact>);
  @override
  _i2.ReactiveContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
              returnValue:
                  _FakeReactiveContext_1(this, Invocation.getter(#context)))
          as _i2.ReactiveContext);
  @override
  _i6.Future<void> updateContacts() => (super.noSuchMethod(
      Invocation.method(#updateContacts, []),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  void setTextFilter(String? text) =>
      super.noSuchMethod(Invocation.method(#setTextFilter, [text]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<void> removeContact(_i7.Contact? contact) => (super.noSuchMethod(
      Invocation.method(#removeContact, [contact]),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
}

/// A class which mocks [RequestsController].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestsController extends _i1.Mock
    implements _i8.RequestsController {
  MockRequestsController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FriendsController get friendsController =>
      (super.noSuchMethod(Invocation.getter(#friendsController),
              returnValue: _FakeFriendsController_2(
                  this, Invocation.getter(#friendsController)))
          as _i3.FriendsController);
  @override
  String get textFilter =>
      (super.noSuchMethod(Invocation.getter(#textFilter), returnValue: '')
          as String);
  @override
  set textFilter(String? _textFilter) =>
      super.noSuchMethod(Invocation.setter(#textFilter, _textFilter),
          returnValueForMissingStub: null);
  @override
  _i2.ObservableList<_i7.Contact> get filteredPendingRequests =>
      (super.noSuchMethod(Invocation.getter(#filteredPendingRequests),
              returnValue: _FakeObservableList_0<_i7.Contact>(
                  this, Invocation.getter(#filteredPendingRequests)))
          as _i2.ObservableList<_i7.Contact>);
  @override
  set filteredPendingRequests(_i2.ObservableList<_i7.Contact>? value) =>
      super.noSuchMethod(Invocation.setter(#filteredPendingRequests, value),
          returnValueForMissingStub: null);
  @override
  _i2.ObservableList<_i7.Contact> get pendingRequests =>
      (super.noSuchMethod(Invocation.getter(#pendingRequests),
              returnValue: _FakeObservableList_0<_i7.Contact>(
                  this, Invocation.getter(#pendingRequests)))
          as _i2.ObservableList<_i7.Contact>);
  @override
  set pendingRequests(_i2.ObservableList<_i7.Contact>? value) =>
      super.noSuchMethod(Invocation.setter(#pendingRequests, value),
          returnValueForMissingStub: null);
  @override
  _i2.ObservableList<_i7.Contact> get sentRequests =>
      (super.noSuchMethod(Invocation.getter(#sentRequests),
              returnValue: _FakeObservableList_0<_i7.Contact>(
                  this, Invocation.getter(#sentRequests)))
          as _i2.ObservableList<_i7.Contact>);
  @override
  set sentRequests(_i2.ObservableList<_i7.Contact>? value) =>
      super.noSuchMethod(Invocation.setter(#sentRequests, value),
          returnValueForMissingStub: null);
  @override
  _i2.ReactiveContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
              returnValue:
                  _FakeReactiveContext_1(this, Invocation.getter(#context)))
          as _i2.ReactiveContext);
  @override
  _i6.Future<void> updateRequests() => (super.noSuchMethod(
      Invocation.method(#updateRequests, []),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> sendRequest(_i7.Contact? contact) => (super.noSuchMethod(
      Invocation.method(#sendRequest, [contact]),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> rejectRequest(_i7.Contact? contact) => (super.noSuchMethod(
      Invocation.method(#rejectRequest, [contact]),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> acceptRequest(_i7.Contact? contact) => (super.noSuchMethod(
      Invocation.method(#acceptRequest, [contact]),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> unsendRequest(_i7.Contact? contact) => (super.noSuchMethod(
      Invocation.method(#unsendRequest, [contact]),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  void setTextFilter(String? text) =>
      super.noSuchMethod(Invocation.method(#setTextFilter, [text]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ContactsAddressServiceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockContactsAddressServiceImpl extends _i1.Mock
    implements _i9.ContactsAddressServiceImpl {
  MockContactsAddressServiceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<String>> getAllPhones(
          {_i10.FlutterContactsHandlerLibW? handler}) =>
      (super.noSuchMethod(
              Invocation.method(#getAllPhones, [], {#handler: handler}),
              returnValue: _i6.Future<List<String>>.value(<String>[]))
          as _i6.Future<List<String>>);
}

/// A class which mocks [SessionState].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionState extends _i1.Mock implements _i11.SessionState {
  MockSessionState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get finishLoggedIn => (super
          .noSuchMethod(Invocation.getter(#finishLoggedIn), returnValue: false)
      as bool);
  @override
  set finishLoggedIn(bool? value) =>
      super.noSuchMethod(Invocation.setter(#finishLoggedIn, value),
          returnValueForMissingStub: null);
  @override
  bool get googleSignedIn => (super
          .noSuchMethod(Invocation.getter(#googleSignedIn), returnValue: false)
      as bool);
  @override
  set googleSignedIn(bool? value) =>
      super.noSuchMethod(Invocation.setter(#googleSignedIn, value),
          returnValueForMissingStub: null);
  @override
  bool get hasDoneOnboarding =>
      (super.noSuchMethod(Invocation.getter(#hasDoneOnboarding),
          returnValue: false) as bool);
  @override
  set hasDoneOnboarding(bool? value) =>
      super.noSuchMethod(Invocation.setter(#hasDoneOnboarding, value),
          returnValueForMissingStub: null);
  @override
  set currentUser(_i12.MyUser? value) =>
      super.noSuchMethod(Invocation.setter(#currentUser, value),
          returnValueForMissingStub: null);
  @override
  _i4.AuthService get authService =>
      (super.noSuchMethod(Invocation.getter(#authService),
              returnValue:
                  _FakeAuthService_3(this, Invocation.getter(#authService)))
          as _i4.AuthService);
  @override
  _i2.ReactiveContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
              returnValue:
                  _FakeReactiveContext_1(this, Invocation.getter(#context)))
          as _i2.ReactiveContext);
  @override
  _i6.Future<void> doneOnBoarding() => (super.noSuchMethod(
      Invocation.method(#doneOnBoarding, []),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<void> isLogged() => (super.noSuchMethod(
      Invocation.method(#isLogged, []),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  void setGoogleSignIn(bool? signedIn) =>
      super.noSuchMethod(Invocation.method(#setGoogleSignIn, [signedIn]),
          returnValueForMissingStub: null);
  @override
  void setFinishLoggedIn(bool? finishedLoggedIn) => super.noSuchMethod(
      Invocation.method(#setFinishLoggedIn, [finishedLoggedIn]),
      returnValueForMissingStub: null);
  @override
  _i6.Future<dynamic> initializeUser() =>
      (super.noSuchMethod(Invocation.method(#initializeUser, []),
          returnValue: _i6.Future<dynamic>.value()) as _i6.Future<dynamic>);
  @override
  _i6.Future<dynamic> updateCurrentUser() =>
      (super.noSuchMethod(Invocation.method(#updateCurrentUser, []),
          returnValue: _i6.Future<dynamic>.value()) as _i6.Future<dynamic>);
  @override
  _i6.Future<bool> updatePhone(String? phone) =>
      (super.noSuchMethod(Invocation.method(#updatePhone, [phone]),
          returnValue: _i6.Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<bool> setDoneOnBoarding() =>
      (super.noSuchMethod(Invocation.method(#setDoneOnBoarding, []),
          returnValue: _i6.Future<bool>.value(false)) as _i6.Future<bool>);
  @override
  _i6.Future<dynamic> doLoginProcess() =>
      (super.noSuchMethod(Invocation.method(#doLoginProcess, []),
          returnValue: _i6.Future<dynamic>.value()) as _i6.Future<dynamic>);
  @override
  _i6.Future<dynamic> initializeUserSession() =>
      (super.noSuchMethod(Invocation.method(#initializeUserSession, []),
          returnValue: _i6.Future<dynamic>.value()) as _i6.Future<dynamic>);
  @override
  _i6.Future<void> login() => (super.noSuchMethod(Invocation.method(#login, []),
      returnValue: _i6.Future<void>.value(),
      returnValueForMissingStub: _i6.Future<void>.value()) as _i6.Future<void>);
  @override
  _i6.Future<dynamic> logOut() =>
      (super.noSuchMethod(Invocation.method(#logOut, []),
          returnValue: _i6.Future<dynamic>.value()) as _i6.Future<dynamic>);
  @override
  bool isOnboardingCompleted() =>
      (super.noSuchMethod(Invocation.method(#isOnboardingCompleted, []),
          returnValue: false) as bool);
  @override
  bool hasPhone() =>
      (super.noSuchMethod(Invocation.method(#hasPhone, []), returnValue: false)
          as bool);
}
