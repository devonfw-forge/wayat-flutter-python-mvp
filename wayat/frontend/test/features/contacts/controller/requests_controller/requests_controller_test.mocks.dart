// Mocks generated by Mockito 5.3.0 from annotations
// in wayat/test/features/contacts/controller/requests_controller/requests_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mobx/mobx.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wayat/domain/contact/contact.dart' as _i6;
import 'package:wayat/features/contacts/controller/friends_controller/friends_controller.dart'
    as _i7;
import 'package:wayat/services/common/http_provider/http_provider.dart' as _i2;
import 'package:wayat/services/friend_requests/requests_service_impl.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpProvider_0 extends _i1.SmartFake implements _i2.HttpProvider {
  _FakeHttpProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableList_1<T> extends _i1.SmartFake
    implements _i3.ObservableList<T> {
  _FakeObservableList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_2 extends _i1.SmartFake
    implements _i3.ReactiveContext {
  _FakeReactiveContext_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RequestsServiceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestsServiceImpl extends _i1.Mock
    implements _i4.RequestsServiceImpl {
  MockRequestsServiceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpProvider get httpProvider => (super.noSuchMethod(
        Invocation.getter(#httpProvider),
        returnValue: _FakeHttpProvider_0(
          this,
          Invocation.getter(#httpProvider),
        ),
      ) as _i2.HttpProvider);
  @override
  _i5.Future<Map<String, List<_i6.Contact>>> getRequests() =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequests,
          [],
        ),
        returnValue: _i5.Future<Map<String, List<_i6.Contact>>>.value(
            <String, List<_i6.Contact>>{}),
      ) as _i5.Future<Map<String, List<_i6.Contact>>>);
  @override
  _i5.Future<bool> sendRequests(List<_i6.Contact>? contacts) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRequests,
          [contacts],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> acceptRequest(_i6.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #acceptRequest,
          [contact],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> rejectRequest(_i6.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #rejectRequest,
          [contact],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> sendRequest(_i6.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #sendRequest,
          [contact],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
  @override
  _i5.Future<bool> unsendRequest(_i6.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #unsendRequest,
          [contact],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [FriendsController].
///
/// See the documentation for Mockito's code generation for more information.
class MockFriendsController extends _i1.Mock implements _i7.FriendsController {
  MockFriendsController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get textFilter => (super.noSuchMethod(
        Invocation.getter(#textFilter),
        returnValue: '',
      ) as String);
  @override
  set textFilter(String? _textFilter) => super.noSuchMethod(
        Invocation.setter(
          #textFilter,
          _textFilter,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i6.Contact> get allContacts => (super.noSuchMethod(
        Invocation.getter(#allContacts),
        returnValue: <_i6.Contact>[],
      ) as List<_i6.Contact>);
  @override
  set allContacts(List<_i6.Contact>? _allContacts) => super.noSuchMethod(
        Invocation.setter(
          #allContacts,
          _allContacts,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.ObservableList<_i6.Contact> get filteredContacts => (super.noSuchMethod(
        Invocation.getter(#filteredContacts),
        returnValue: _FakeObservableList_1<_i6.Contact>(
          this,
          Invocation.getter(#filteredContacts),
        ),
      ) as _i3.ObservableList<_i6.Contact>);
  @override
  set filteredContacts(_i3.ObservableList<_i6.Contact>? value) =>
      super.noSuchMethod(
        Invocation.setter(
          #filteredContacts,
          value,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i6.Contact> get availableContacts => (super.noSuchMethod(
        Invocation.getter(#availableContacts),
        returnValue: <_i6.Contact>[],
      ) as List<_i6.Contact>);
  @override
  List<_i6.Contact> get unavailableContacts => (super.noSuchMethod(
        Invocation.getter(#unavailableContacts),
        returnValue: <_i6.Contact>[],
      ) as List<_i6.Contact>);
  @override
  _i3.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_2(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.ReactiveContext);
  @override
  _i5.Future<void> updateContacts() => (super.noSuchMethod(
        Invocation.method(
          #updateContacts,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void setTextFilter(String? text) => super.noSuchMethod(
        Invocation.method(
          #setTextFilter,
          [text],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> removeContact(_i6.Contact? contact) => (super.noSuchMethod(
        Invocation.method(
          #removeContact,
          [contact],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
